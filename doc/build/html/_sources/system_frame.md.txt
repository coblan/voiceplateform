# 拨打系统架构

从功能上来看,拨打后台主要可以分为以下几个部分:
1. 管理通话记录
2. 调度机器人接听电话。
3. 调度机器人拨打电话。
4. 配备一个管理后台，管理员可以查看`拨打后台`各项数据。

## 管理通话记录

由于机器人的接入，使得触发通话的开始与结束有多种方式，比较复杂。编程实现时，将各种操作转换为通话事件。`拨打后台`将通话过程分拆为以下几个事件。其中每个`方框`为一个`拨打后台`事件

``` mermaid::

    graph TD
    A[开始拨打] -->|客户端协商| B[用户进入频道]
    B --> |客户端通话|C[用户退出]
    C -->|用户全部退出| D[通话结束]
```

### 开始拨打

开始拨打由客户端调用`/dapi/call/user`接口触发，或者由机器人主动拨打触发。触发该事件后，后台会做以下几个处理:

1. 为每个相关用户创建`VoiceMsgList`语音消息。该语音消息便于客户端查询用户是否有未接语音。
2. 创建`CallRecord`通话记录。
3. 创建延迟检查(接听方是否拒接)任务。

### 用户进入频道

客户端调用`/dapi/call/enter`接口触发该事件。该事件下，后台主要会做以下几项处理:

1. 修改`VoiceMsgList`语音消息记录，标记为已经接听状态。客户端查询用户是否有未接语音时，不会再返回该条语音消息。
2. 更新`CallRecord`的一些相关信息。例如开始时间，用户计数等。
3. 触发`recording`录音任务。

### 用户退出

客户端调用`通话事件`接口，上传`code=2`的通话事件时，触发该*后台事件*。后台会做以下几个处理:

1. 更新`VoiceMsgList`语音消息记录状态为完成状态。
2. 更新`CallRecord`的一些相关信息。例如结束时间等。
3. 如果用户退出完毕，则触发`通话结束`后台事件

### 通话结束

触发该事件后，后台会组织`CallRecord`所关联的各种数据，然后触发异步任务向`app后台`推送。

## 调度机器人接听

在`开始拨打`事件中，会触发`延迟检测`,如果在主叫用户设定等待时间内，被叫用户未接听电话，则后台会向`消息队列`投递消息，触发机器接听。

| exchange  | rounting_key  | 
| ----- | -----|
| rtc-robot   | receive |

消息格式:

```
{
    "from": "98087081204510002", 
    "to": "98087081204510001", 
    "channel": "ch_363u053167"
}

```

## 调度机器人拨打

客户端通过接口上报用户的定时任务。在定时任务到期时，`拨打后台`会向`消息队列`投递消息，触发机器人执行拨打任务.

| exchange  | rounting_key  | 
| ----- | -----|
| rtc-robot   | call |

消息格式:

```
{
    "from": "98087081204510002", 
    "to": ["98087081204510001","98087081204510003"], 
    "channel": "ch_363u053167"
}

```

## 拨打管理后台

拨打管理后台是为了便于管理`拨打后台`数据而开放的功能。

[点击这里](/pc/callrecord) 访问管理后台

界面如下::

![Image](./_static/backend.png)

管理后台主要包括几个页面:

1. 通话记录管理界面。可以实时查看`拨打后台`存储的`callrecord`通话记录数据
2. 定时任务页面.
3. 配置管理页面。主要用于设置前端SDK需要的一些配置项。
4. 模拟api用于开发测试。
5. 前端日志查询界面。

